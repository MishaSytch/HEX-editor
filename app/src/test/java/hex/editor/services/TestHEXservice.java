package hex.editor.services;

import java.util.Scanner;
import java.util.Arrays;
import java.io.File;
import java.io.FileNotFoundException;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import hex.editor.FilePaths;


public class TestHEXservice {
    static String bigFilePath; 
    static String verySmallFilePath;
    static String oneChar;
    static HEXservice heXservice;

    @BeforeAll
    static void getter() {
        bigFilePath = FilePaths.getBigFilePath();
        verySmallFilePath = FilePaths.getVerySmallFilePath();
        oneChar = FilePaths.getOneChar();
        heXservice = new HEXservice();
    }

    @Test 
    void testGetHex_one() {
        try (Scanner scanner = new Scanner(new File(oneChar))) {
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNext()){
                stringBuilder.append(scanner.next());
            }
            String ch = stringBuilder.toString();

            heXservice.readLinesFromFile(oneChar);
            String hex = heXservice.getHex()[0];

            Assertions.assertEquals(hex, Integer.toHexString(ch.getBytes()[0]));
        } catch (FileNotFoundException exception) {}
    }

    @Test
    void testGetHex_small() {
        heXservice.readLinesFromFile(verySmallFilePath);
        String[] hex = heXservice.getHex();
        Byte[] bytes = Arrays.stream(hex)
            .map(x -> Byte.valueOf(x, 16))
            .toArray(Byte[]::new);
        Assertions.assertEquals(bytes, new byte[]{
            (byte)0x50, (byte)0x75, (byte)0x6C, (byte)0x76, (byte)0x69, (byte)0x6E, (byte)0x61, (byte)0x72, (byte)0x20, (byte)0x65, (byte)0x6C, (byte)0x65,
            (byte)0x6D, (byte)0x65, (byte)0x6E, (byte)0x74, (byte)0x75, (byte)0x6D, (byte)0x20, (byte)0x69, (byte)0x6E, (byte)0x74, (byte)0x65, (byte)0x67,
            (byte)0x65, (byte)0x72, (byte)0x20, (byte)0x65, (byte)0x6E, (byte)0x69, (byte)0x6D, (byte)0x20, (byte)0x6E, (byte)0x65, (byte)0x71, (byte)0x75,
            (byte)0x65, (byte)0x20, (byte)0x76, (byte)0x6F, (byte)0x6C, (byte)0x75, (byte)0x74, (byte)0x70, (byte)0x61, (byte)0x74, (byte)0x20, (byte)0x61,
            (byte)0x63, (byte)0x20, (byte)0x74, (byte)0x69, (byte)0x6E, (byte)0x63, (byte)0x69, (byte)0x64, (byte)0x75, (byte)0x6E, (byte)0x74, (byte)0x20,
            (byte)0x76, (byte)0x69, (byte)0x74, (byte)0x61, (byte)0x65, (byte)0x2E, (byte)0x20, (byte)0x0A, (byte)0x46, (byte)0x65, (byte)0x6C, (byte)0x69,
            (byte)0x73, (byte)0x20, (byte)0x69, (byte)0x6D, (byte)0x70, (byte)0x65, (byte)0x72, (byte)0x64, (byte)0x69, (byte)0x65, (byte)0x74, (byte)0x20,
            (byte)0x70, (byte)0x72, (byte)0x6F, (byte)0x69, (byte)0x6E, (byte)0x20, (byte)0x66, (byte)0x65, (byte)0x72, (byte)0x6D, (byte)0x65, (byte)0x6E,
            (byte)0x74, (byte)0x75, (byte)0x6D, (byte)0x20, (byte)0x6C, (byte)0x65, (byte)0x6F, (byte)0x20, (byte)0x76, (byte)0x65, (byte)0x6C, (byte)0x20,
            (byte)0x6F, (byte)0x72, (byte)0x63, (byte)0x69, (byte)0x2E, (byte)0x20, (byte)0x4D, (byte)0x61, (byte)0x75, (byte)0x72, (byte)0x69, (byte)0x73,
            (byte)0x20, (byte)0x69, (byte)0x6E, (byte)0x20, (byte)0x61, (byte)0x6C, (byte)0x69, (byte)0x71, (byte)0x75, (byte)0x61, (byte)0x6D, (byte)0x20,
            (byte)0x73, (byte)0x65, (byte)0x6D, (byte)0x20, (byte)0x66, (byte)0x72, (byte)0x69, (byte)0x6E, (byte)0x67, (byte)0x69, (byte)0x6C, (byte)0x6C,
            (byte)0x61, (byte)0x20, (byte)0x75, (byte)0x74, (byte)0x20, (byte)0x6D, (byte)0x6F, (byte)0x72, (byte)0x62, (byte)0x69, (byte)0x2E, (byte)0x20,
            (byte)0x51, (byte)0x75, (byte)0x61, (byte)0x6D, (byte)0x20, (byte)0x76, (byte)0x75, (byte)0x6C, (byte)0x70, (byte)0x75, (byte)0x74, (byte)0x61,
            (byte)0x74, (byte)0x65, (byte)0x20, (byte)0x64, (byte)0x69, (byte)0x67, (byte)0x6E, (byte)0x69, (byte)0x73, (byte)0x73, (byte)0x69, (byte)0x6D,
            (byte)0x20, (byte)0x73, (byte)0x75, (byte)0x73, (byte)0x70, (byte)0x65, (byte)0x6E, (byte)0x64, (byte)0x69, (byte)0x73, (byte)0x73, (byte)0x65,
            (byte)0x20, (byte)0x69, (byte)0x6E, (byte)0x20, (byte)0x65, (byte)0x73, (byte)0x74, (byte)0x2E, (byte)0x20, (byte)0x0A, (byte)0x45, (byte)0x67,
            (byte)0x65, (byte)0x74, (byte)0x20, (byte)0x61, (byte)0x6C, (byte)0x69, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x74, (byte)0x20, (byte)0x6E,
            (byte)0x69, (byte)0x62, (byte)0x68, (byte)0x20, (byte)0x70, (byte)0x72, (byte)0x61, (byte)0x65, (byte)0x73, (byte)0x65, (byte)0x6E, (byte)0x74,
            (byte)0x20, (byte)0x74, (byte)0x72, (byte)0x69, (byte)0x73, (byte)0x74, (byte)0x69, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x20, (byte)0x6D,
            (byte)0x61, (byte)0x67, (byte)0x6E, (byte)0x61, (byte)0x20, (byte)0x73, (byte)0x69, (byte)0x74, (byte)0x20, (byte)0x61, (byte)0x6D, (byte)0x65,
            (byte)0x74, (byte)0x20, (byte)0x70, (byte)0x75, (byte)0x72, (byte)0x75, (byte)0x73, (byte)0x20, (byte)0x67, (byte)0x72, (byte)0x61, (byte)0x76,
            (byte)0x69, (byte)0x64, (byte)0x61, (byte)0x2E, (byte)0x20, (byte)0x49, (byte)0x70, (byte)0x73, (byte)0x75, (byte)0x6D, (byte)0x20, (byte)0x64,
            (byte)0x6F, (byte)0x6C, (byte)0x6F, (byte)0x72, (byte)0x20, (byte)0x73, (byte)0x69, (byte)0x74, (byte)0x20, (byte)0x61, (byte)0x6D, (byte)0x65,
            (byte)0x74, (byte)0x20, (byte)0x63, (byte)0x6F, (byte)0x6E, (byte)0x73, (byte)0x65, (byte)0x63, (byte)0x74, (byte)0x65, (byte)0x74, (byte)0x75,
            (byte)0x72, (byte)0x20, (byte)0x61, (byte)0x64, (byte)0x69, (byte)0x70, (byte)0x69, (byte)0x73, (byte)0x63, (byte)0x69, (byte)0x6E, (byte)0x67,
            (byte)0x20, (byte)0x65, (byte)0x6C, (byte)0x69, (byte)0x74, (byte)0x20, (byte)0x64, (byte)0x75, (byte)0x69, (byte)0x73, (byte)0x2E, (byte)0x20,
            (byte)0x46, (byte)0x72, (byte)0x69, (byte)0x6E, (byte)0x67, (byte)0x69, (byte)0x6C, (byte)0x6C, (byte)0x61, (byte)0x20, (byte)0x65, (byte)0x73,
            (byte)0x74, (byte)0x20, (byte)0x75, (byte)0x6C, (byte)0x6C, (byte)0x61, (byte)0x6D, (byte)0x63, (byte)0x6F, (byte)0x72, (byte)0x70, (byte)0x65,
            (byte)0x72, (byte)0x20, (byte)0x65, (byte)0x67, (byte)0x65, (byte)0x74, (byte)0x20, (byte)0x6E, (byte)0x75, (byte)0x6C, (byte)0x6C, (byte)0x61,
            (byte)0x20, (byte)0x66, (byte)0x61, (byte)0x63, (byte)0x69, (byte)0x6C, (byte)0x69, (byte)0x73, (byte)0x69, (byte)0x2E, (byte)0x20, (byte)0x49,
            (byte)0x6E, (byte)0x20, (byte)0x68, (byte)0x65, (byte)0x6E, (byte)0x64, (byte)0x72, (byte)0x65, (byte)0x72, (byte)0x69, (byte)0x74, (byte)0x20,
            (byte)0x67, (byte)0x72, (byte)0x61, (byte)0x76, (byte)0x69, (byte)0x64, (byte)0x61, (byte)0x20, (byte)0x72, (byte)0x75, (byte)0x74, (byte)0x72,
            (byte)0x75, (byte)0x6D, (byte)0x20, (byte)0x71, (byte)0x75, (byte)0x69, (byte)0x73, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x20, (byte)0x6E,
            (byte)0x6F, (byte)0x6E, (byte)0x20, (byte)0x74, (byte)0x65, (byte)0x6C, (byte)0x6C, (byte)0x75, (byte)0x73, (byte)0x20, (byte)0x6F, (byte)0x72,
            (byte)0x63, (byte)0x69, (byte)0x20, (byte)0x61, (byte)0x63, (byte)0x2E, (byte)0x20, (byte)0x52, (byte)0x69, (byte)0x73, (byte)0x75, (byte)0x73,
            (byte)0x20, (byte)0x6E, (byte)0x75, (byte)0x6C, (byte)0x6C, (byte)0x61, (byte)0x6D, (byte)0x20, (byte)0x65, (byte)0x67, (byte)0x65, (byte)0x74,
            (byte)0x20, (byte)0x66, (byte)0x65, (byte)0x6C, (byte)0x69, (byte)0x73, (byte)0x20, (byte)0x65, (byte)0x67, (byte)0x65, (byte)0x74, (byte)0x20,
            (byte)0x6E, (byte)0x75, (byte)0x6E, (byte)0x63, (byte)0x2E, (byte)0x20, (byte)0x55, (byte)0x74, (byte)0x20, (byte)0x66, (byte)0x61, (byte)0x75,
            (byte)0x63, (byte)0x69, (byte)0x62, (byte)0x75, (byte)0x73, (byte)0x20, (byte)0x70, (byte)0x75, (byte)0x6C, (byte)0x76, (byte)0x69, (byte)0x6E,
            (byte)0x61, (byte)0x72, (byte)0x20, (byte)0x65, (byte)0x6C, (byte)0x65, (byte)0x6D, (byte)0x65, (byte)0x6E, (byte)0x74, (byte)0x75, (byte)0x6D,
            (byte)0x20, (byte)0x69, (byte)0x6E, (byte)0x74, (byte)0x65, (byte)0x67, (byte)0x65, (byte)0x72, (byte)0x20, (byte)0x65, (byte)0x6E, (byte)0x69,
            (byte)0x6D, (byte)0x20, (byte)0x6E, (byte)0x65, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x20, (byte)0x76, (byte)0x6F, (byte)0x6C, (byte)0x75,
            (byte)0x74, (byte)0x70, (byte)0x61, (byte)0x74, (byte)0x2E, (byte)0x20, (byte)0x50, (byte)0x72, (byte)0x65, (byte)0x74, (byte)0x69, (byte)0x75,
            (byte)0x6D, (byte)0x20, (byte)0x66, (byte)0x75, (byte)0x73, (byte)0x63, (byte)0x65, (byte)0x20, (byte)0x69, (byte)0x64, (byte)0x20, (byte)0x76,
            (byte)0x65, (byte)0x6C, (byte)0x69, (byte)0x74, (byte)0x20, (byte)0x75, (byte)0x74, (byte)0x2E, (byte)0x20, (byte)0x54, (byte)0x72, (byte)0x69,
            (byte)0x73, (byte)0x74, (byte)0x69, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x20, (byte)0x6E, (byte)0x75, (byte)0x6C, (byte)0x6C, (byte)0x61,
            (byte)0x20, (byte)0x61, (byte)0x6C, (byte)0x69, (byte)0x71, (byte)0x75, (byte)0x65, (byte)0x74, (byte)0x20, (byte)0x65, (byte)0x6E, (byte)0x69,
            (byte)0x6D, (byte)0x20, (byte)0x74, (byte)0x6F, (byte)0x72, (byte)0x74, (byte)0x6F, (byte)0x72, (byte)0x20, (byte)0x61, (byte)0x74, (byte)0x20,
            (byte)0x61, (byte)0x75, (byte)0x63, (byte)0x74, (byte)0x6F, (byte)0x72, (byte)0x20, (byte)0x75, (byte)0x72, (byte)0x6E, (byte)0x61, (byte)0x2E,
            (byte)0x0A, (byte)0x0A, (byte)0x43, (byte)0x72, (byte)0x61, (byte)0x73, (byte)0x20, (byte)0x74, (byte)0x69, (byte)0x6E, (byte)0x63, (byte)0x69,
            (byte)0x64, (byte)0x75, (byte)0x6E, (byte)0x74, (byte)0x20, (byte)0x6C, (byte)0x6F, (byte)0x62, (byte)0x6F, (byte)0x72, (byte)0x74, (byte)0x69,
            (byte)0x73, (byte)0x20, (byte)0x66, (byte)0x65, (byte)0x75, (byte)0x67, (byte)0x69, (byte)0x61, (byte)0x74, (byte)0x20, (byte)0x76, (byte)0x69,
            (byte)0x76, (byte)0x61, (byte)0x6D, (byte)0x75, (byte)0x73, (byte)0x20, (byte)0x61, (byte)0x74, (byte)0x20, (byte)0x61, (byte)0x75, (byte)0x67,
            (byte)0x75, (byte)0x65, (byte)0x20, (byte)0x65, (byte)0x67, (byte)0x65, (byte)0x74, (byte)0x2E
        });
    }

    @Test
    void testGetChars() throws FileNotFoundException {
        heXservice.readLinesFromFile(verySmallFilePath);
        try (Scanner scanner = new Scanner(new File(verySmallFilePath))) {
            StringBuilder stringBuilder = new StringBuilder();
            while (scanner.hasNext()) {
                stringBuilder.append(scanner.nextLine());
            }

            char[] lines = stringBuilder.toString().toCharArray();

            Assertions.assertEquals(heXservice.getChars(), lines);
        } catch (FileNotFoundException exception) {
            System.out.println(exception.getMessage());
        }
    }
}
